// Code generated by migration system on 2025-06-30 21:45:05
// DO NOT EDIT THIS FILE MANUALLY

package database

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/shopspring/decimal"
)

// Exercises represents the exercises table
type Exercises struct {
	Id               string    `db:"id" json:"id"` // Primary key // Default: gen_random_uuid()
	Name             string    `db:"name" json:"name"`
	Description      *string   `db:"description" json:"description"`
	Muscle_group     *string   `db:"muscle_group" json:"muscle_group"`
	Equipment        *string   `db:"equipment" json:"equipment"`
	Difficulty_level *string   `db:"difficulty_level" json:"difficulty_level"`
	Instructions     *string   `db:"instructions" json:"instructions"`
	Created_at       time.Time `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Exercises
func (Exercises) TableName() string {
	return "exercises"
}

// Scan implements the sql.Scanner interface for Exercises
func (m *Exercises) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Exercises", value)
	}
}

// Value implements the driver.Valuer interface for Exercises
func (m Exercises) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Users represents the users table
type Users struct {
	Id            string    `db:"id" json:"id"`             // Primary key // Default: gen_random_uuid()
	Email         string    `db:"email" json:"email"`       // Unique
	Username      string    `db:"username" json:"username"` // Unique
	Password_hash string    `db:"password_hash" json:"password_hash"`
	First_name    *string   `db:"first_name" json:"first_name"`
	Last_name     *string   `db:"last_name" json:"last_name"`
	Created_at    time.Time `db:"created_at" json:"created_at"` // Default: now()
	Updated_at    time.Time `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Users
func (Users) TableName() string {
	return "users"
}

// Scan implements the sql.Scanner interface for Users
func (m *Users) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Users", value)
	}
}

// Value implements the driver.Valuer interface for Users
func (m Users) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workout_exercises represents the workout_exercises table
type Workout_exercises struct {
	Id               string           `db:"id" json:"id"`                   // Primary key // Default: gen_random_uuid()
	Workout_id       string           `db:"workout_id" json:"workout_id"`   // Foreign key
	Exercise_id      string           `db:"exercise_id" json:"exercise_id"` // Foreign key
	Sets             int              `db:"sets" json:"sets"`               // Default: 1
	Reps             *int             `db:"reps" json:"reps"`
	Weight_kg        *decimal.Decimal `db:"weight_kg" json:"weight_kg"`
	Duration_seconds *int             `db:"duration_seconds" json:"duration_seconds"`
	Order_index      int              `db:"order_index" json:"order_index"`   // Default: 0
	Rest_seconds     int              `db:"rest_seconds" json:"rest_seconds"` // Default: 60
	Notes            *string          `db:"notes" json:"notes"`
	Created_at       time.Time        `db:"created_at" json:"created_at"` // Default: now()
}

// TableName returns the table name for Workout_exercises
func (Workout_exercises) TableName() string {
	return "workout_exercises"
}

// Scan implements the sql.Scanner interface for Workout_exercises
func (m *Workout_exercises) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workout_exercises", value)
	}
}

// Value implements the driver.Valuer interface for Workout_exercises
func (m Workout_exercises) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workout_sessions represents the workout_sessions table
type Workout_sessions struct {
	Id               string     `db:"id" json:"id"`                 // Primary key // Default: gen_random_uuid()
	User_id          string     `db:"user_id" json:"user_id"`       // Foreign key
	Workout_id       *string    `db:"workout_id" json:"workout_id"` // Foreign key (nullable)
	Name             string     `db:"name" json:"name"`
	Started_at       time.Time  `db:"started_at" json:"started_at"` // Default: now()
	Completed_at     *time.Time `db:"completed_at" json:"completed_at"`
	Duration_minutes *int       `db:"duration_minutes" json:"duration_minutes"`
	Notes            *string    `db:"notes" json:"notes"`
	Created_at       time.Time  `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time  `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Workout_sessions
func (Workout_sessions) TableName() string {
	return "workout_sessions"
}

// Scan implements the sql.Scanner interface for Workout_sessions
func (m *Workout_sessions) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workout_sessions", value)
	}
}

// Value implements the driver.Valuer interface for Workout_sessions
func (m Workout_sessions) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workouts represents the workouts table
type Workouts struct {
	Id               string    `db:"id" json:"id"`           // Primary key // Default: gen_random_uuid()
	User_id          string    `db:"user_id" json:"user_id"` // Foreign key
	Name             string    `db:"name" json:"name"`
	Description      *string   `db:"description" json:"description"`
	Duration_minutes *int      `db:"duration_minutes" json:"duration_minutes"`
	Created_at       time.Time `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Workouts
func (Workouts) TableName() string {
	return "workouts"
}

// Scan implements the sql.Scanner interface for Workouts
func (m *Workouts) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workouts", value)
	}
}

// Value implements the driver.Valuer interface for Workouts
func (m Workouts) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// =============================================================================
// REQUEST/RESPONSE MODELS
// =============================================================================

// =============================================================================
// USERS MODELS
// =============================================================================

// CreateUserRequest represents the request body for creating a user
type CreateUserRequest struct {
	Email      string  `json:"email" validate:"required,email"`
	Username   string  `json:"username" validate:"required,min=3,max=100"`
	Password   string  `json:"password" validate:"required,min=8"`
	First_name *string `json:"first_name,omitempty"`
	Last_name  *string `json:"last_name,omitempty"`
}

// UpdateUserRequest represents the request body for updating a user
type UpdateUserRequest struct {
	Email      *string `json:"email,omitempty" validate:"omitempty,email"`
	Username   *string `json:"username,omitempty" validate:"omitempty,min=3,max=100"`
	Password   *string `json:"password,omitempty" validate:"omitempty,min=8"`
	First_name *string `json:"first_name,omitempty"`
	Last_name  *string `json:"last_name,omitempty"`
}

// LoginRequest represents the request body for user login
type LoginRequest struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

// UserResponse represents the response body for user operations
type UserResponse struct {
	Id         string    `json:"id"`
	Email      string    `json:"email"`
	Username   string    `json:"username"`
	First_name *string   `json:"first_name,omitempty"`
	Last_name  *string   `json:"last_name,omitempty"`
	Created_at time.Time `json:"created_at"`
	Updated_at time.Time `json:"updated_at"`
}

// LoginResponse represents the response body for login operations
type LoginResponse struct {
	User  UserResponse `json:"user"`
	Token string       `json:"token"`
}

// =============================================================================
// WORKOUTS MODELS
// =============================================================================

// CreateWorkoutRequest represents the request body for creating a workout
type CreateWorkoutRequest struct {
	Name             string  `json:"name" validate:"required,max=255"`
	Description      *string `json:"description,omitempty"`
	Duration_minutes *int    `json:"duration_minutes,omitempty" validate:"omitempty,min=1"`
}

// UpdateWorkoutRequest represents the request body for updating a workout
type UpdateWorkoutRequest struct {
	Name             *string `json:"name,omitempty" validate:"omitempty,max=255"`
	Description      *string `json:"description,omitempty"`
	Duration_minutes *int    `json:"duration_minutes,omitempty" validate:"omitempty,min=1"`
}

// WorkoutResponse represents the response body for workout operations
type WorkoutResponse struct {
	Id               string    `json:"id"`
	User_id          string    `json:"user_id"`
	Name             string    `json:"name"`
	Description      *string   `json:"description,omitempty"`
	Duration_minutes *int      `json:"duration_minutes,omitempty"`
	Created_at       time.Time `json:"created_at"`
	Updated_at       time.Time `json:"updated_at"`
}

// =============================================================================
// EXERCISES MODELS
// =============================================================================

// CreateExerciseRequest represents the request body for creating an exercise
type CreateExerciseRequest struct {
	Name             string  `json:"name" validate:"required,max=255"`
	Description      *string `json:"description,omitempty"`
	Muscle_group     *string `json:"muscle_group,omitempty" validate:"omitempty,max=100"`
	Equipment        *string `json:"equipment,omitempty" validate:"omitempty,max=100"`
	Difficulty_level *string `json:"difficulty_level,omitempty" validate:"omitempty,max=50"`
	Instructions     *string `json:"instructions,omitempty"`
}

// UpdateExerciseRequest represents the request body for updating an exercise
type UpdateExerciseRequest struct {
	Name             *string `json:"name,omitempty" validate:"omitempty,max=255"`
	Description      *string `json:"description,omitempty"`
	Muscle_group     *string `json:"muscle_group,omitempty" validate:"omitempty,max=100"`
	Equipment        *string `json:"equipment,omitempty" validate:"omitempty,max=100"`
	Difficulty_level *string `json:"difficulty_level,omitempty" validate:"omitempty,max=50"`
	Instructions     *string `json:"instructions,omitempty"`
}

// ExerciseResponse represents the response body for exercise operations
type ExerciseResponse struct {
	Id               string    `json:"id"`
	Name             string    `json:"name"`
	Description      *string   `json:"description,omitempty"`
	Muscle_group     *string   `json:"muscle_group,omitempty"`
	Equipment        *string   `json:"equipment,omitempty"`
	Difficulty_level *string   `json:"difficulty_level,omitempty"`
	Instructions     *string   `json:"instructions,omitempty"`
	Created_at       time.Time `json:"created_at"`
	Updated_at       time.Time `json:"updated_at"`
}

// =============================================================================
// WORKOUT_EXERCISES MODELS
// =============================================================================

// CreateWorkoutExerciseRequest represents the request body for creating a workout exercise
type CreateWorkoutExerciseRequest struct {
	Workout_id       string           `json:"workout_id" validate:"required"`
	Exercise_id      string           `json:"exercise_id" validate:"required"`
	Sets             int              `json:"sets" validate:"required,min=1"`
	Reps             *int             `json:"reps,omitempty" validate:"omitempty,min=1"`
	Weight_kg        *decimal.Decimal `json:"weight_kg,omitempty" validate:"omitempty,min=0"`
	Duration_seconds *int             `json:"duration_seconds,omitempty" validate:"omitempty,min=1"`
	Order_index      int              `json:"order_index" validate:"min=0"`
	Rest_seconds     int              `json:"rest_seconds" validate:"min=0"`
	Notes            *string          `json:"notes,omitempty"`
}

// UpdateWorkoutExerciseRequest represents the request body for updating a workout exercise
type UpdateWorkoutExerciseRequest struct {
	Workout_id       *string          `json:"workout_id,omitempty" validate:"omitempty"`
	Exercise_id      *string          `json:"exercise_id,omitempty" validate:"omitempty"`
	Sets             *int             `json:"sets,omitempty" validate:"omitempty,min=1"`
	Reps             *int             `json:"reps,omitempty" validate:"omitempty,min=1"`
	Weight_kg        *decimal.Decimal `json:"weight_kg,omitempty" validate:"omitempty,min=0"`
	Duration_seconds *int             `json:"duration_seconds,omitempty" validate:"omitempty,min=1"`
	Order_index      *int             `json:"order_index,omitempty" validate:"omitempty,min=0"`
	Rest_seconds     *int             `json:"rest_seconds,omitempty" validate:"omitempty,min=0"`
	Notes            *string          `json:"notes,omitempty"`
}

// WorkoutExerciseResponse represents the response body for workout exercise operations
type WorkoutExerciseResponse struct {
	Id               string           `json:"id"`
	Workout_id       string           `json:"workout_id"`
	Exercise_id      string           `json:"exercise_id"`
	Sets             int              `json:"sets"`
	Reps             *int             `json:"reps,omitempty"`
	Weight_kg        *decimal.Decimal `json:"weight_kg,omitempty"`
	Duration_seconds *int             `json:"duration_seconds,omitempty"`
	Order_index      int              `json:"order_index"`
	Rest_seconds     int              `json:"rest_seconds"`
	Notes            *string          `json:"notes,omitempty"`
	Created_at       time.Time        `json:"created_at"`
}

// =============================================================================
// WORKOUT_SESSIONS MODELS
// =============================================================================

// CreateWorkoutSessionRequest represents the request body for creating a workout session
type CreateWorkoutSessionRequest struct {
	Workout_id       *string    `json:"workout_id,omitempty"`
	Name             string     `json:"name" validate:"required,max=255"`
	Started_at       *time.Time `json:"started_at,omitempty"`
	Completed_at     *time.Time `json:"completed_at,omitempty"`
	Duration_minutes *int       `json:"duration_minutes,omitempty" validate:"omitempty,min=1"`
	Notes            *string    `json:"notes,omitempty"`
}

// UpdateWorkoutSessionRequest represents the request body for updating a workout session
type UpdateWorkoutSessionRequest struct {
	Workout_id       *string    `json:"workout_id,omitempty"`
	Name             *string    `json:"name,omitempty" validate:"omitempty,max=255"`
	Started_at       *time.Time `json:"started_at,omitempty"`
	Completed_at     *time.Time `json:"completed_at,omitempty"`
	Duration_minutes *int       `json:"duration_minutes,omitempty" validate:"omitempty,min=1"`
	Notes            *string    `json:"notes,omitempty"`
}

// WorkoutSessionResponse represents the response body for workout session operations
type WorkoutSessionResponse struct {
	Id               string     `json:"id"`
	User_id          string     `json:"user_id"`
	Workout_id       *string    `json:"workout_id,omitempty"`
	Name             string     `json:"name"`
	Started_at       time.Time  `json:"started_at"`
	Completed_at     *time.Time `json:"completed_at,omitempty"`
	Duration_minutes *int       `json:"duration_minutes,omitempty"`
	Notes            *string    `json:"notes,omitempty"`
	Created_at       time.Time  `json:"created_at"`
	Updated_at       time.Time  `json:"updated_at"`
}

// =============================================================================
// PAGINATION MODELS
// =============================================================================

// PaginationRequest represents common pagination parameters
type PaginationRequest struct {
	Limit  int `json:"limit" query:"limit" validate:"min=1,max=100"`
	Offset int `json:"offset" query:"offset" validate:"min=0"`
}

// PaginationResponse represents pagination metadata
type PaginationResponse struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
	Total  int `json:"total"`
}

// =============================================================================
// LIST RESPONSE MODELS
// =============================================================================

// UsersListResponse represents a paginated list of users
type UsersListResponse struct {
	Data       []UserResponse     `json:"data"`
	Pagination PaginationResponse `json:"pagination"`
}

// WorkoutsListResponse represents a paginated list of workouts
type WorkoutsListResponse struct {
	Data       []WorkoutResponse  `json:"data"`
	Pagination PaginationResponse `json:"pagination"`
}

// ExercisesListResponse represents a paginated list of exercises
type ExercisesListResponse struct {
	Data       []ExerciseResponse `json:"data"`
	Pagination PaginationResponse `json:"pagination"`
}

// WorkoutExercisesListResponse represents a paginated list of workout exercises
type WorkoutExercisesListResponse struct {
	Data       []WorkoutExerciseResponse `json:"data"`
	Pagination PaginationResponse        `json:"pagination"`
}

// WorkoutSessionsListResponse represents a paginated list of workout sessions
type WorkoutSessionsListResponse struct {
	Data       []WorkoutSessionResponse `json:"data"`
	Pagination PaginationResponse       `json:"pagination"`
}

// Custom types for better type safety
type JSONMap map[string]interface{}

func (j JSONMap) Value() (driver.Value, error) {
	return json.Marshal(j)
}

func (j *JSONMap) Scan(value interface{}) error {
	if value == nil {
		*j = nil
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, j)
	case string:
		return json.Unmarshal([]byte(v), j)
	default:
		return fmt.Errorf("cannot scan %T into JSONMap", value)
	}
}
