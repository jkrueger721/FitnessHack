// Code generated by migration system on 2025-07-01 09:38:58
// DO NOT EDIT THIS FILE MANUALLY

package database

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/shopspring/decimal"
)

// Exercises represents the exercises table
type Exercises struct {
	Id               string      `db:"id" json:"id"` // Primary key // Default: gen_random_uuid()
	Name             interface{} `db:"name" json:"name"`
	Description      string      `db:"description" json:"description"`
	Muscle_group     interface{} `db:"muscle_group" json:"muscle_group"`
	Equipment        interface{} `db:"equipment" json:"equipment"`
	Difficulty_level interface{} `db:"difficulty_level" json:"difficulty_level"`
	Instructions     string      `db:"instructions" json:"instructions"`
	Created_at       time.Time   `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time   `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Exercises
func (Exercises) TableName() string {
	return "exercises"
}

// Scan implements the sql.Scanner interface for Exercises
func (m *Exercises) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Exercises", value)
	}
}

// Value implements the driver.Valuer interface for Exercises
func (m Exercises) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Programs represents the programs table
type Programs struct {
	Id             string      `db:"id" json:"id"` // Primary key // Default: gen_random_uuid()
	Name           interface{} `db:"name" json:"name"`
	Description    string      `db:"description" json:"description"`
	User_id        string      `db:"user_id" json:"user_id"`
	Duration_weeks int         `db:"duration_weeks" json:"duration_weeks"`
	Difficulty     interface{} `db:"difficulty" json:"difficulty"`
	Is_active      bool        `db:"is_active" json:"is_active"`   // Default: true
	Created_at     time.Time   `db:"created_at" json:"created_at"` // Default: now()
	Updated_at     time.Time   `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Programs
func (Programs) TableName() string {
	return "programs"
}

// Scan implements the sql.Scanner interface for Programs
func (m *Programs) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Programs", value)
	}
}

// Value implements the driver.Valuer interface for Programs
func (m Programs) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Users represents the users table
type Users struct {
	Id            string      `db:"id" json:"id"`             // Primary key // Default: uuid_generate_v4()
	Email         interface{} `db:"email" json:"email"`       // Unique
	Username      interface{} `db:"username" json:"username"` // Unique
	Password_hash interface{} `db:"password_hash" json:"password_hash"`
	First_name    interface{} `db:"first_name" json:"first_name"`
	Last_name     interface{} `db:"last_name" json:"last_name"`
	Created_at    time.Time   `db:"created_at" json:"created_at"` // Default: now()
	Updated_at    time.Time   `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Users
func (Users) TableName() string {
	return "users"
}

// Scan implements the sql.Scanner interface for Users
func (m *Users) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Users", value)
	}
}

// Value implements the driver.Valuer interface for Users
func (m Users) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workout_exercises represents the workout_exercises table
type Workout_exercises struct {
	Id               string          `db:"id" json:"id"`                   // Primary key // Default: gen_random_uuid()
	Workout_id       string          `db:"workout_id" json:"workout_id"`   // Unique
	Exercise_id      string          `db:"exercise_id" json:"exercise_id"` // Unique
	Sets             int             `db:"sets" json:"sets"`               // Default: 1
	Reps             int             `db:"reps" json:"reps"`
	Weight_kg        decimal.Decimal `db:"weight_kg" json:"weight_kg"`
	Duration_seconds int             `db:"duration_seconds" json:"duration_seconds"`
	Order_index      int             `db:"order_index" json:"order_index"`   // Unique // Default: 0
	Rest_seconds     int             `db:"rest_seconds" json:"rest_seconds"` // Default: 60
	Notes            string          `db:"notes" json:"notes"`
	Created_at       time.Time       `db:"created_at" json:"created_at"` // Default: now()
}

// TableName returns the table name for Workout_exercises
func (Workout_exercises) TableName() string {
	return "workout_exercises"
}

// Scan implements the sql.Scanner interface for Workout_exercises
func (m *Workout_exercises) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workout_exercises", value)
	}
}

// Value implements the driver.Valuer interface for Workout_exercises
func (m Workout_exercises) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workout_sessions represents the workout_sessions table
type Workout_sessions struct {
	Id               string      `db:"id" json:"id"` // Primary key // Default: gen_random_uuid()
	User_id          string      `db:"user_id" json:"user_id"`
	Workout_id       string      `db:"workout_id" json:"workout_id"`
	Name             interface{} `db:"name" json:"name"`
	Started_at       time.Time   `db:"started_at" json:"started_at"` // Default: now()
	Completed_at     time.Time   `db:"completed_at" json:"completed_at"`
	Duration_minutes int         `db:"duration_minutes" json:"duration_minutes"`
	Notes            string      `db:"notes" json:"notes"`
	Created_at       time.Time   `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time   `db:"updated_at" json:"updated_at"` // Default: now()
}

// TableName returns the table name for Workout_sessions
func (Workout_sessions) TableName() string {
	return "workout_sessions"
}

// Scan implements the sql.Scanner interface for Workout_sessions
func (m *Workout_sessions) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workout_sessions", value)
	}
}

// Value implements the driver.Valuer interface for Workout_sessions
func (m Workout_sessions) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Workouts represents the workouts table
type Workouts struct {
	Id               string    `db:"id" json:"id"` // Primary key // Default: gen_random_uuid()
	User_id          string    `db:"user_id" json:"user_id"`
	Name             string    `db:"name" json:"name"`
	Description      string    `db:"description" json:"description"`
	Duration_minutes int       `db:"duration_minutes" json:"duration_minutes"`
	Created_at       time.Time `db:"created_at" json:"created_at"` // Default: now()
	Updated_at       time.Time `db:"updated_at" json:"updated_at"` // Default: now()
	Program_id       string    `db:"program_id" json:"program_id"`
}

// TableName returns the table name for Workouts
func (Workouts) TableName() string {
	return "workouts"
}

// Scan implements the sql.Scanner interface for Workouts
func (m *Workouts) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, m)
	case string:
		return json.Unmarshal([]byte(v), m)
	default:
		return fmt.Errorf("cannot scan %T into Workouts", value)
	}
}

// Value implements the driver.Valuer interface for Workouts
func (m Workouts) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Custom types for better type safety
type JSONMap map[string]interface{}

func (j JSONMap) Value() (driver.Value, error) {
	return json.Marshal(j)
}

func (j *JSONMap) Scan(value interface{}) error {
	if value == nil {
		*j = nil
		return nil
	}

	switch v := value.(type) {
	case []byte:
		return json.Unmarshal(v, j)
	case string:
		return json.Unmarshal([]byte(v), j)
	default:
		return fmt.Errorf("cannot scan %T into JSONMap", value)
	}
}
